/**
 * @file index.ts - Contains class for converting JSON data generated by BuildDocs module into markdown and/or HTML.
 * @access private
 * @namespace {JsonToDocs | build-docs.JsonToDocs}
 * @module JsonToDocs
 * @memberof namespace:build-docs
 */

import { DataItem, ProcessedDataItem } from '../types';

/**
 * @access private
 * @memberof module:JsonToDocs
 * @memberof namespace:build-docs.JsonToDocs
 * @classdesc Converting JSON data generated by BuildDocs module into markdown and/or HTML.
 */
/**
 * Class to convert JSON data to Markdown and HTML
 */
class JsonToDocs {
    data: DataItem[];
    processedData: ProcessedDataItem[];

    /**
     * @param {DataItem[]} data - The JSON data to convert
     */
    constructor(data: DataItem[]) {
        this.data = data;
        this.processedData = this.processData(data);
    }

    /**
     * Process data for easier use
     * @param {DataItem[]} data - The data to process
     * @return {ProcessedDataItem[]} The processed data
     */
    processData(data: DataItem[]): ProcessedDataItem[] {
        return data.map((item) => {
            const newItem: ProcessedDataItem = {
                id: item.id,
                fileName: item.fileName,
                filePath: item.filePath,
                createdDate: item.createdDate,
                modifiedDate: item.modifiedDate,
                relatedComments: item.relatedComments,
                doc: {},
            };

            Object.entries(item.doc).forEach(([key, valArray]) => {
                newItem.doc[key] = valArray.map((val) => val.description);
            });

            return newItem;
        });
    }

    /**
     * Convert the data to Markdown
     * @return {string} The Markdown string
     * @todo Implement the method
     */
    toMarkdown(): string {
        // Implement the method as before...
        return '';
    }

    /**
     * Convert the data to HTML
     * @return {string} The HTML string
     * @todo Implement the method
     */
    toHtml(
        title = 'Placeholder Title',
        subTitle='Placeholder subtitle for html.'
    ): string {
        
        const bodyStart = `
        <html>
            <head>
                <title>${title}</title>
                <meta charset="utf-8" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <script src="https://cdn.tailwindcss.com"></script>
            </head>
            <body class="bg-gray-100 flex flex-col gap-8">`;

        

        const buildHeader = () => {
            `<header class="w-full p-0 m-0 px-4 pt-4 border-solid border-2 bg-white flex flex-col gap-4 max-w-8xl mx-auto">
                <div class="max-w-4xl mx-auto w-full">
                    <h1 class="text-blue-500 text-4xl">
                        ${title}
                    </h1>
                    <p class="text-gray-400">
                        ${subTitle}
                    </p>
                </div>
                <nav>
                    <ul class="flex flex-row gap-6 mt-auto h-full">
                        <li class="py-2 px-4 border-solid border-b-4 border-blue-500 hover:border-blue-500/80"
                            data-role="nav-main"
                            data-group="overview"
                        >
                            <a href="#overview">Overview</a>
                    </li>`
                    + (() => {
                      'test'  
                    })
                + `</ul>
                </nav>
            </header>`;
                
            



        };
        //TODO: update this to return the correct html
        return '';
    }
}

module.exports = JsonToDocs;