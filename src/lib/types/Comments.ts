/**
 * @module Types.Comments
 * @memberof module:Types
 * @summary Type Definitions for all Comments extracted and parsed.
 *
 * @changelog 2023-07-18 | Erik Plachta | chore: Update JSDocs, and extracted from index now that role is clear.
 */

/**
 * @type {Type} Comment
 * @memberof module:Types.Comments
 * @typedef Comment
 * @summary The result of extracting documentation from a file.
 * @description Comment block default structure when extracted from source file.
 * @prop {CommentsProcessed['id']} id - The unique identifier for the file.
 * @prop {string} line - The line number the comment block starts on.
 */
type Comment = {
  id: string
  line: string
  type: string
  description: string
}

/**
 * @type {Type} Comments
 * @memberof module:Types.Comments
 * @typedef Comments
 * @summary The result of extracting documentation from the comment block.
 * @prop {string} id - The unique identifier for the file.
 * @prop {string} line - The line number the comment block starts on.
 */
type Comments = {
  [key: string]: Comment[]
}

/**
 * @type {Type} CommentsRaw
 * @memberof module:Types.Comments
 * @memberof module:DocsToJson
 * @typedef CommentsRaw
 * @summary The result of extracting documentation from a file.
 * @description The result of extracting documentation from a file.
 *
 */
type CommentsRaw = {
  id: string
  fileName: string
  filePath: string
  comments: Comments
  modifiedDate: Date
  createdDate: Date
}

/**
 * @type {Type} CommentsProcessed
 * @typedef CommentsProcessed
 * @memberof module:Types.Comments
 * @memberof module:DocsToJson
 * @summary Used by JsonToUi to render the documentation.
 * @description Takes data using typedef `CommentsRaw`, and processes it into a more usable format.
 * @prop {string} id - The unique identifier for the file. Generated by crypto.randomUUID()
 * @prop { 'public' | 'private' | 'protected' | null } access - The access level of the item. Can be null, public, private, or protected.
 *
 *
 * @changelog 2023-07-17 | Erik Plachta | Add more complete content.
 * @changelog 2023-07-18 | Erik Plachta | Finalize concept.
 *
 * @todo  2023-07-18 | Erik Plachta | Add Summary, Description, and params.
 */
type CommentsProcessed = {
  id: string
  access: 'public' | 'private' | 'protected' | null | string
  summary: string | null
  description: string | null

  //-- type of item.
  type: {
    type: string // between `{}`
    description: string // after `}` and sometimes `-`
  } | null

  author?: string | null
  license?: string | null
  version?: string | null
  changelog: void | string[]

  returns?: {
    type: string // between `{}`
    description: string // after `-`
  }

  throws?: {
    type: string // between `{}`
    description: string // after `-`
  }
  example: void | string[]
  related?: string[]
  see?: string[]

  todo?: void | string[]

  bug?: void | string[]

  arguments:
    | {
        id: CommentsProcessed['id']
        type: string | null // between `{}`
        name: string | null // between `[]`
        description: string | null // after `-`
      }[]
    | void

  requires:
    | {
        id: string
        type:
          | string
          | 'module'
          | 'node-module'
          | 'namespace'
          | 'function'
          | null //-- before `:`
        name: string | null // after `:` and before `-`
        description: string | null // after `-`
      }[]
    | void

  props:
    | {
        id: string
        type: string | null // between `{}`
        name: string | null // between `[]`
        description: string | null // after `-`
      }[]
    | void

  // Managed by JsonToUi to determine if item is a root item or not.
  isRootItem: boolean

  fileDetails: {
    // All return this even if not file
    fileName: string
    filePath: string
    createdDate: Date
    modifiedDate: Date
  }

  namespaces: string[]
  modules: string[]

  memberOf?: {
    type: string
    description: string
  }[]

  // isClass: boolean;
  // isModule: boolean;
  parent: {
    id: CommentsProcessed['id']
    type: string | null
    association: 'namespace' | 'module' | 'file' | string
    description?: string
  }[]
  children: {
    id: CommentsProcessed['id']
    type: string | null
    association: 'namespace' | 'module' | 'file' | string
    description?: string
  }[]
  // dataToRender: dataToRender;

  // Optionally add the original doc object for debugging.
  comments?: Comments
}

export { Comment, Comments, CommentsRaw, CommentsProcessed }
