/**
 * @file types\index.ts
 * @path build-docs\types\index.ts
 * @summary TypeScript Types used within the build-docs utility.
 * @module Types
 * @namespace {build-docs.Types}
 * @access private
 * @version 0.0.2
 * @since 2021-07-14
 * @license MIT
 *
 */



/**
 * @type {Type}
 * @memberof module:Types
 * @typedef Comment
 * @summary The result of extracting documentation from a file.
 * @description Comment block default structure when extracted from source file.
 * @prop {ProcessedDataItem['id']} id - The unique identifier for the file.
 * @prop {string} line - The line number the comment block starts on.
 */
export type Comment ={
  id: ProcessedDataItem['id']
  line: string
  type: string
  description: string
}

/**
 * @type {Type} Doc
 * @memberof module:Types
 */
export type Doc = {
  [key: string]: Comment[]
}
/**
 * @type {Type} DocResult
 * @memberof module:Types
 * @memberof module:DocsToJson
 * @interface DocResult
 * @summary The result of extracting documentation from a file.
 * @description The result of extracting documentation from a file.
 * @prop {string} id - The unique identifier for the file.
 * @prop {string} fileName - The name of the file itself.
 * @prop {string} filePath - The path to the file.
 * @prop {object} doc - The documentation extracted from the file.
 * @prop {Date} modifiedDate - The date the file was last modified.
 * @prop {Date} createdDate - The date the file was created.
 * @prop {object[]} relatedComments - All comments extracted from the file.
 */
export type DocResult = {
  id: ProcessedDataItem['id']
  fileName: string
  filePath: string
  doc: Doc
  modifiedDate: Date
  createdDate: Date
  //-- All related comments and their full comment blocks within the file.
  //TODO: 20230713 #EP || Convert from getting all comments to showing relation by IDs, children, parent, etc.
  relatedComments: {
    commentBlock: string
  }[]
  // relatedComments: { comment: string }[]
}

/**
 * @type {Type} DataItem
 * @memberof module:Types
 */
export type DataItem = {
  id: string
  fileName: string
  filePath: string
  // doc: Doc
  do : []
  createdDate: string
  modifiedDate: string
  relatedComments: string[]
}

/**
 * @type {Type} Namespace
 * @memberof module:Types
 */
export type Namespace = {
  id: string
  description: string
}

/**
 * @type {Type} Module
 * @memberof module:Types
 */
export type Module = {
  id: string
  description: string
}

/**
 * @type {Type} ProcessedDataItem
 * @typedef ProcessedDataItem
 * @memberof module:Types
 * @memberof module:DocsToJson
 * @summary Extracted details from a comment block to be used to build documentation.
 * @description The details of a file.
 * @prop {string} id - The unique identifier for the file. Generated by crypto.randomUUID()
 * @prop { 'public' | 'private' | 'protected' } access - The access level of the item. Can be null, public, private, or protected.
 * 
 * 
 * @changelog 2023-07-17 | Erik Plachta | Add more complete content.
 * @changelog 2023-07-18 | Erik Plachta | Finalize concept.
 * 
 * @todo  2023-07-18 | Erik Plachta | Add Summary, Description, and params.
 */
export type ProcessedDataItem = {
  id: string
  access: 'public' | 'private' | 'protected'
  summary: string | null
  description: string | null

  //-- type of item.
  type: {
    type: string // between `{}`
    description: string // after `}` and sometimes `-`
  } | null

  author?: string | null
  license?: string | null
  version?: string | null
  changelog: void | string[]

  returns?: {
    type: string // between `{}`
    description: string // after `-`
  }

  throws?: {
    type: string // between `{}`
    description: string // after `-`
  }
  example: void | string[]
  related?: string[]
  see?: string[]

  todo?: void | string[]

  bug?: void | string[]

  arguments:
    | {
        id: ProcessedDataItem['id']
        type: string | null // between `{}`
        name: string | null // between `[]`
        description: string | null // after `-`
      }[]
    | void

  requires:
    | {
        id: string
        type:
          | string
          | 'module'
          | 'node-module'
          | 'namespace'
          | 'function'
          | null //-- before `:`
        name: string | null // after `:` and before `-`
        description: string | null // after `-`
      }[]
    | void

  props:
    | {
        id: string
        type: string | null // between `{}`
        name: string | null // between `[]`
        description: string | null // after `-`
      }[]
    | void

  // Managed by JsonToUi to determine if item is a root item or not.
  isRootItem: boolean

  fileDetails: {
    // All return this even if not file
    fileName: string
    filePath: string
    createdDate: string
    modifiedDate: string
  }

  namespaces: string[]
  modules: string[]

  memberOf?: {
    type: string
    description: string
  }[]

  // isClass: boolean;
  // isModule: boolean;
  parent: {
    id: ProcessedDataItem['id']
    type: string | null
    association: 'namespace' | 'module' | 'file' | string
    description?: string
  }[]
  children: {
    id: ProcessedDataItem['id']
    type: string | null
    association: 'namespace' | 'module' | 'file' | string
    description?: string
  }[]
  // dataToRender: dataToRender;

  // Optionally add the original doc object for debugging.
  doc?: Doc
}

export type JsonToUiConfig = {
  convertToMarkdown: boolean
  convertToHtml: boolean
}

export type File = {
  id: string //-- randomUUID
  description: string //-- file name for reference
  filePath: string //-- for connecting all items to their file.
}

